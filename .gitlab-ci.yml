---
stages:
  - fast-build
  - build

############################################
#               COMMON                     #
############################################

.common: &common
  tags:
    - docker

.build: &build
  script:
    - JOB_NAME=( $CI_BUILD_NAME )
    - export CC=${JOB_NAME[2]}
    - export CXX=${JOB_NAME[3]}
    - $CXX --version
    - flex --version
    - echo RUNNER_MAKE_J $RUNNER_MAKE_J
    - make -k ${JOB_NAME[4]} $EXTRA_MAKE_FLAGS $RUNNER_MAKE_J

.build-bsd: &build-bsd
  script:
    - JOB_NAME=( $CI_BUILD_NAME )
    - export CC=${JOB_NAME[2]}
    - export CXX=${JOB_NAME[3]}
    - $CC --version
    - echo RUNNER_MAKE_J $RUNNER_MAKE_J
    - gmake -k ${JOB_NAME[4]} $EXTRA_MAKE_FLAGS $RUNNER_MAKE_J
  tags:
    - bsd

.build-mac-sierra: &build-mac-sierra
  variables:
    EXTRA_MAKE_FLAGS: "NO_YACC_WERROR=1"
  <<: *build
  tags:
    - mac
    - sierra

.prepare-debian: &debian
  <<: *common
  before_script:
    - JOB_NAME=( $CI_BUILD_NAME )
    - export CC=${JOB_NAME[2]}
    - export CXX=${JOB_NAME[3]}
    - apt-get update -yq > /dev/null
    - apt-get install -y --no-install-recommends flex bison libncurses5-dev
        build-essential > /dev/null
    - apt-get install -y ${CC} > /dev/null
    - if [[ $CXX == g++* ]] ; then
    - apt-get install -y ${CXX} > /dev/null
    - fi
  <<: *build

.prepare-old-debian: &old-debian
  <<: *common
  before_script:
    - JOB_NAME=( $CI_BUILD_NAME )
    - export CC=${JOB_NAME[2]}
    - export CXX=${JOB_NAME[3]}
    - apt-get update -yq > /dev/null
    - apt-get install -y flex bison libncurses5-dev build-essential
        > /dev/null
    - apt-get install -y ${CC} > /dev/null
    - if [[ $CXX == g++* ]] ; then
    - apt-get install -y ${CXX} > /dev/null
    - fi
  <<: *build

.prepare-cc7: &cc7
  <<: *common
  before_script:
    - rpm --rebuilddb && yum -y install yum-plugin-ovl # docker/overlay fix
    - yum install -y git bison flex ncurses-devel make perl-Digest-MD5 gcc-c++
        > /dev/null
    - export YACC=bison
  <<: *build

.prepare-slc6: &slc6
  <<: *common
  before_script:
    - source /opt/rh/devtoolset-4/enable
    - source /opt/rh/python27/enable
    - rpm --rebuilddb && yum -y install yum-plugin-ovl # docker/overlay fix
    - yum -y install yum-plugin-ovl # docker/overlay fix
    - yum install -y git bison flex ncurses-devel perl-Digest-MD5 > /dev/null
    - export YACC=bison
  <<: *build


.prepare-ubuntu-gcc6-with-flex: &ubuntu-gcc6
  <<: *debian
  before_script:
    - JOB_NAME=( $CI_BUILD_NAME )
    - export FLEX=${JOB_NAME[6]}
    - apt-get update -yq > /dev/null
    - apt-get install -y --no-install-recommends flex bison libncurses5-dev
        software-properties-common wget m4 help2man > /dev/null
    - add-apt-repository ppa:ubuntu-toolchain-r/test > /dev/null
    - apt-get update -yq > /dev/null
    - apt-get install -y gcc-6 g++-6 > /dev/null
    - export CC=gcc-6
    - export CXX=g++-6
    - export FLEXURL=https://github.com/westes/flex/releases/download
    - wget ${FLEXURL}/v${FLEX}/flex-${FLEX}.tar.gz > /dev/null
    - tar -xf flex-${FLEX}.tar.gz
    - cd flex-${FLEX}
    - ./configure
    - make
    - make install
    - cd ..

.prepare-opensuse: &opensuse
  <<: *common
  before_script:
  - zypper --non-interactive install git bison flex ncurses-devel
      make gcc gcc-c++ clang perl which > /dev/null
  <<: *build

#########################################
### QEMU full system emulation

.qemu-system: &qemu-system
  stage: build
  script:
    - _DISABLE="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
    - _SSH="ssh -c 3des-cbc root@127.0.0.1 -p $PORT $_DISABLE"
    - JOB_NAME=( $CI_BUILD_NAME )
    - _TARGET="${JOB_NAME[4]}"
    - sleep 60
    - while ! $_SSH -o ConnectTimeout=5 'uname -a'; do
        echo "Alive!" && sleep 1; done
    - scp -r -P $PORT $_DISABLE ./ root@127.0.0.1:./
    - $_SSH "make -k $_TARGET $EXTRA_MAKE_FLAGS"
  # after_script:
  #   - echo quit | socat - UNIX-CONNECT:/tmp/monitor
  tags:
    - docker
  variables:
    PORT: "2222"

.qemu-system-arm: &qemu-system-arm
  image: munken/qemu:arm
  before_script:
    - qemu-system-arm -M vexpress-a9 -kernel /qemu/vmlinuz-3.2.0-4-vexpress
        -initrd /qemu/initrd.img-3.2.0-4-vexpress -drive
        if=sd,file=/qemu/debian_wheezy_armhf_apt.qcow2 -append
        "root=/dev/mmcblk0p2" -redir tcp:2222::22 -m 512 -monitor
        unix:/tmp/monitor,server,nowait -daemonize -display none
  <<: *qemu-system

.qemu-system-ppc: &qemu-system-ppc
  image: munken/qemu:ppc
  before_script:
    - qemu-system-ppc -hda /qemu/debian_wheezy_powerpc_gcc.qcow2 -redir
        tcp:${PORT}::22 -m 512 -monitor unix:/tmp/monitor,server,nowait
        -daemonize -display none
  <<: *qemu-system

############################################
#               TARGETS                    #
############################################

# Fast build (only empty or xtst) to quickly see if there is some chance.

# Has test files.
Trusty root5 gcc g++ is446:
  stage: fast-build
  image: munken/root:trusty-root5
  <<: *debian

Trusty root5 gcc g++ empty:
  stage: fast-build
  image: munken/root:trusty-root5
  <<: *debian

Trusty root5 gcc g++ xtst:
  stage: fast-build
  image: munken/root:trusty-root5
  <<: *debian

Trusty root5 clang clang++ empty:
  stage: fast-build
  image: munken/root:trusty-root5
  <<: *debian

Trusty root5 clang clang++ xtst:
  stage: fast-build
  image: munken/root:trusty-root5
  <<: *debian

Trusty 32bit gcc g++ empty:
  stage: fast-build
  image: daald/ubuntu32:trusty
  <<: *debian

Trusty 32bit clang clang++ empty:
  stage: fast-build
  image: daald/ubuntu32:trusty
  <<: *debian

freebsd 10 gcc g++ empty:
  stage: fast-build
  variables:
    EXTRA_MAKE_FLAGS:
      "NO_YACC_WERROR=1 CXXLINKFLAGS=-Wl,-rpath=/usr/local/lib/gcc48"
  <<: *build-bsd

mac sierra gcc g++ empty:
  stage: fast-build
  <<: *build-mac-sierra

###
# Simulated qemu architectures take long time, begin with those.

qemu arm . . empty:
  stage: build
  <<: *qemu-system-arm

qemu arm . . xtst:
  stage: build
  <<: *qemu-system-arm

qemu ppc . . empty:
  stage: build
  <<: *qemu-system-ppc

qemu ppc . . xtst:
  stage: build
  <<: *qemu-system-ppc

###
# And the rest.

SLC6 root6 gcc g++ all:
  stage: build
  image: munken/root:slc6-root6
  <<: *slc6

SLC6 root5 gcc g++ all:
  stage: build
  image: munken/root:slc6-root5
  <<: *slc6

CC7 root6 gcc g++ all:
  stage: build
  image: munken/root:cc7-root6
  <<: *cc7

CC7 root5 gcc g++ all:
  stage: build
  image: munken/root:cc7-root5
  <<: *cc7

Trusty root5 gcc g++ all:
  stage: build
  image: munken/root:trusty-root5
  <<: *debian

Trusty root5 clang clang++ all:
  stage: build
  image: munken/root:trusty-root5
  <<: *debian

Trusty root6 gcc g++ all:
  stage: build
  image: munken/root:trusty-root6
  <<: *debian

Trusty root6 clang clang++ all:
  stage: build
  image: munken/root:trusty-root6
  <<: *debian

Trusty 32bit gcc g++ all:
  stage: build
  image: daald/ubuntu32:trusty
  <<: *debian

Xenial root5 gcc g++ all:
  stage: build
  image: munken/root:xenial-root5
  <<: *debian

Xenial root5 clang clang++ all:
  stage: build
  image: munken/root:xenial-root5
  <<: *debian

Xenial root6 gcc g++ all:
  stage: build
  image: munken/root:xenial-root6
  <<: *debian

Xenial root6 clang clang++ all:
  stage: build
  image: munken/root:xenial-root6
  <<: *debian

Xenial root6 gcc-6 g++-6 all flex 2.6.1:
  stage: build
  image: munken/root:xenial-root6
  <<: *ubuntu-gcc6

Xenial root6 gcc-6 g++-6 all flex 2.6.2:
  stage: build
  image: munken/root:xenial-root6
  <<: *ubuntu-gcc6

Arch minimal gcc g++ all:
  stage: build
  <<: *common
  image: base/archlinux
  before_script:
    - pacman -Syu --noconfirm
    - pacman -S base-devel git flex bison ncurses --noconfirm --needed
  <<: *build

gcc-latest minimal gcc g++ all:
  stage: build
  image: gcc:latest
  <<: *debian

gcc-latest minimal gcc g++ empty merging:
  stage: build
  image: gcc:latest
  <<: *debian
  variables:
    EXTRA_MAKE_FLAGS: "USE_MERGING=1"

gcc-latest minimal gcc g++ xtst merging:
  stage: build
  image: gcc:latest
  <<: *debian
  variables:
    EXTRA_MAKE_FLAGS: "USE_MERGING=1"

debian jessie gcc g++ all:
  stage: build
  image: debian:jessie
  <<: *debian

debian jessie clang-3.6 clang++-3.6 all:
  stage: build  
  image: munken/jessie-clang:3.6
  <<: *debian

debian jessie clang-3.7 clang++-3.7 all:
  stage: build
  image: munken/jessie-clang:3.7
  <<: *debian

debian jessie clang-3.8 clang++-3.8 all:
  stage: build
  image: munken/jessie-clang:3.8
  <<: *debian

debian jessie clang-3.9 clang++-3.9 all:
  stage: build
  image: munken/jessie-clang:3.9
  <<: *debian

debian jessie clang-4.0 clang++-4.0 all:
  stage: build
  image: munken/jessie-clang:4.0
  <<: *debian

debian jessie clang-5.0 clang++-5.0 all:
  stage: build
  image: munken/jessie-clang:5.0
  <<: *debian

debian jessie clang-6.0 clang++-6.0 all:
  stage: build
  image: munken/jessie-clang:6.0
  <<: *debian

debian jessie clang-7 clang++-7 all:
  stage: build
  image: munken/jessie-clang:7
  <<: *debian

debian wheezy gcc g++ all:
  stage: build
  image: debian:wheezy
  <<: *debian

debian etch gcc g++ all:
  stage: build
  image: munken/debian:etch
  variables:
    EXTRA_MAKE_FLAGS: "NO_YACC_WERROR=1"
  <<: *old-debian

opensuse latest gcc g++ all:
  stage: build
  image: opensuse:latest
  <<: *opensuse

opensuse latest clang clang++ all:
  stage: build
  image: opensuse:latest
  <<: *opensuse

freebsd 10 gcc g++ all:
  stage: build
  variables:
    EXTRA_MAKE_FLAGS:
      "NO_YACC_WERROR=1 CXXLINKFLAGS=-Wl,-rpath=/usr/local/lib/gcc48"
  <<: *build-bsd

freebsd 10 clang clang++ all:
  stage: build
  variables:
    EXTRA_MAKE_FLAGS: "NO_YACC_WERROR=1"
  <<: *build-bsd

mac sierra gcc g++ all:
  stage: build
  <<: *build-mac-sierra
