# -*- Makefile -*-

# This file is part of UCESB - a tool for data unpacking and processing.
#
# Copyright (C) 2016  GSI Helmholtzzentrum fuer Schwerionenforschung GmbH
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301  USA

# $(UNPACKER) is the name of the unpacker.
#
# $(UCESB_BASE_DIR) is the path to the parent directory
# of ucesb  i.e. the program ucesb would be found as
# $(UCESB_BASE_DIR)/ucesb/ucesb

#$(warning UNPACKER  =$(UNPACKER))
#$(warning UCESB_BASE=$(UCESB_BASE_DIR))

#########################################################

UNAME_S:=$(shell uname -s)

ifneq ($(UNAME_S),Darwin)
  LIB_LRT:=-lrt
else
  LIB_LRT:=
endif

ifndef QUIET
QUIET=@
endif

CXXLINK = $(CXX) #-fmudflapth -lmudflapth # -fstack-protector

CXXFLAGS += -I. "-DUNPACKERNAME=$(UNPACKER)" # so autogenerated files find includes
CXXFLAGS += -I$(UCESB_BASE_DIR)/file_input -I$(UCESB_BASE_DIR)/threading \
	-I$(UCESB_BASE_DIR)/lu_common -I$(UCESB_BASE_DIR)/acc_def

CXXFLAGS += # -ansi , troubles with strdup and fileno

CXXFLAGS += -ansi -Wall -W -Wno-unused-function -Wno-unused-label \
	-Wno-unused-parameter -Wwrite-strings -Wconversion #\
#	-Wno-non-template-friend # -Wshadow -Wcast-qual

ifneq ($(UNAME_S),Darwin)
  CXXFLAGS += -Wno-non-template-friend
else
  CXXFLAGS += -Wno-comment -Wno-macro-redefined -Wno-sign-conversion -Wno-float-conversion -Wno-mismatched-tags
endif

CXXFLAGS += -g
OPTFLAGS += #-DNDEBUG
OPTFLAGS += #-fmudflapth # -fstack-protector

OPTFLAGS += -O3

# For supporting large files:
CXXFLAGS += -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64

CXXFLAGS += -D__STDC_LIMIT_MACROS

UCESB_CPP_FLAGS =
PSDC_CPP_FLAGS =

#CXXFLAGS += -pg
#CXXLINKFLAGS += -pg

SRC_DIRS=$(addprefix $(UCESB_BASE_DIR)/,eventloop common mapcalib)
SRC_DIRS_LAND02_CODE=$(addprefix $(UCESB_BASE_DIR)/,hbook watcher file_input threading lu_common)

#########################################################

# Check if tee(2) is available

HAVE_TEE := $(shell gcc -o /dev/null $(UCESB_BASE_DIR)/file_input/teetest.c \
	2> /dev/null && echo -DHAVE_TEE)

CXXFLAGS += $(HAVE_TEE)

#########################################################

include $(UCESB_BASE_DIR)/makefile_deps.inc

ifneq (,$(GCC_IS_3_3)) # gcc-3.3 miscompiles the generated code
CXX=g++-3.4
export CXX
endif

CPP_DEFINES_POWERPC = $(shell cpp -dM /dev/null | grep __POWERPC__)

ifneq (,$(CPP_DEFINES_POWERPC))
CXXFLAGS += -D__powerpc__
endif

#########################################################

TREE_UCESB_OR_HOME_SRC_DIR = $(firstword $(wildcard $(addsuffix /$(1),$(shell pwd)/.. $(UCESB_BASE_DIR)/.. $(HOME))))

define CHECK_DIRECTORY_EXIST
DIR_EXISTS:=$(shell test -d '$(1)' && echo exists)
#$$(warning Checking for existence: $(1))
ifeq (,$$(DIR_EXISTS))
$$(error Directory '$(1)' does not exist)
endif
endef

$(eval $(call CHECK_DIRECTORY_EXIST,$(UCESB_BASE_DIR)))

#########################################################

MC_GENDIR=mc_gen

GENERATED = gen/clean_structures.hh \
	gen/clean_raw_structure.hh \
	gen/clean_cal_structure.hh \
	gen/structures.hh gen/unpacker.hh gen/matcher.hh gen/locations.hh \
	gen/raw_structure.hh gen/data_mapping.hh \
	gen/cal_structure.hh \
	gen/struct_fcncall.hh gen/struct_mirror.hh gen/struct_mirror_decl.hh \
	gen/raw_struct_fcncall.hh gen/raw_struct_mirror.hh \
	gen/cal_struct_fcncall.hh \
	gen/verify.uce gen/struct_dump.psd gen/raw_struct_dump.psd \
	gen/subevent_names.hh \
	gen/packer.hh

OBJS    = unpacker.o event_loop.o correlation.o corr_plot_dense.o \
	convert_picture.o pretty_dump.o \
	event_sizes.o tstamp_alignment.o \
	mainfcn.o location.o \
	common.o zero_suppress_map.o signal_id_map.o \
	struct_fcns.o struct_mapping.o multi_chunk_fcn.o \
	struct_calib.o user_struct.o \
	detector_requests.o signal_id_range.o \
	str_set.o external_data.o \
	sig_mmap.o error.o markconvbold.o file_line.o prefix_unit.o \
	input_buffer.o file_mmap.o pipe_buffer.o \
	limit_file_size.o \
	thread_info.o \
	decompress.o forked_child.o logfile.o \
	map_info.o calib_info.o mc_def.o \
	mille_output.o \
	set_thread_name.o \
	$(MC_GENDIR)/mc_parser.o $(MC_GENDIR)/mc_lexer.o
GENOBJS =

all: gen/$(UNPACKER).uce gen/$(UNPACKER).pre \
	$(UNPACKER) gen/$(UNPACKER).runstamps \
	generated

#########################################################

ifdef USE_ROOT

FILE_ROOT_CONFIG:=$(shell which root-config 2> /dev/null)
ifeq (,$(FILE_ROOT_CONFIG))
FILE_ROOT_CONFIG=$(shell which $(ROOTSYS)/bin/root-config 2> /dev/null)
endif
ifeq (,$(FILE_ROOT_CONFIG))
$(error ROOT requested (via USE_ROOT), but 'root-config' cannot be found (even with ROOTSYS).)
endif

CXXFLAGS += -DUSE_ROOT=$(USE_ROOT) -DUSING_ROOT=$(USE_ROOT)
CXXFLAGS += $(shell $(FILE_ROOT_CONFIG) --cflags)
CXXLINKFLAGS += $(shell $(FILE_ROOT_CONFIG) --ldflags)
CXXLIBS      += $(shell $(FILE_ROOT_CONFIG) --libs)

NTUPLE_CREATION=1
endif #USE_ROOT

#########################################################

# If USE_CERNLIB and CERN_ROOT is specified, compile in support for PAW ntuples
ifdef USE_CERNLIB

ifndef CERN_ROOT
# Try to localise cernlib on our own
CERNLIB_CERN_ROOT=$(shell which cernlib | sed -e "s,/bin/cernlib,," | grep -v cernlib)
ifneq (,$(CERNLIB_CERN_ROOT))
ifneq (,$(shell test -e $(CERNLIB_CERN_ROOT)/include/cfortran/packlib.h && echo exists))
CERN_ROOT=$(CERNLIB_CERN_ROOT)
endif
endif
endif

ifndef CERN_ROOT
$(error CERNLIB requested (via USE_CERNLIB), but cannot find 'cernlib' and CERN_ROOT is not set.  Perhaps '. cernlogin pro' or '. cernlogin.bash pro' will help.)
endif # CERN_ROOT

CERN_INCLUDE_DIRS += $(addprefix $(CERN_ROOT),/include/cfortran/ /src/cfortran/)

# Use an ugly hack to try to find out if we want to force 32-bit build
# (we should really look at the size of libpacklib, but to find that
# is a pain.  Additionally, to find the .a file does not help, we need
# to go into that to get out the arch it was build for...  .so files
# do not always exist.  Looking at e.g. pawX11 is much easier.  OF course,
# this is not really what we want...

# We additionally only want to set the flag if we could need it, i.e.
# are usually compiling 64-bit

DEFAULT_SYSTEM_64:=$(shell cpp -dM /dev/null | grep __amd64__)

ifneq (,$(DEFAULT_SYSTEM_64))
FILE_PAWX11:=$(shell which pawX11)
ifneq (,$(FILE_PAWX11))
FILE_PAWX11_32:=$(shell file $(FILE_PAWX11) | grep "32-bit")
ifneq (,$(FILE_PAWX11_32))
ifneq (,$(findstring -m64,$(CXXFLAGS)))
$(error ROOT requested 64-bit build, CERNLIB about to request 32-bit build.  Cannot coexist like that.)
endif
FLAGS_CERNLIB_M32 = -m32
endif
endif
endif

CXXFLAGS     += -DUSE_CERNLIB=$(USE_CERNLIB) -DUSING_CERNLIB=$(USE_CERNLIB) \
	-Df2cFortran \
	$(addprefix -I,$(CERN_INCLUDE_DIRS)) \
	$(FLAGS_CERNLIB_M32)
CXXLINKFLAGS += $(FLAGS_CERNLIB_M32)
# libshift seems not needed, but gives problems on redhat at least
CXXLIBS      += $(shell $(CERN_ROOT)/bin/cernlib packlib | sed -e 's/-lshift//')
ifeq (,$(filter -lg2c -lgfortran,$(CXXLIBS)))
# cernlib did not tell if it wants -lg2c or -lgfortran, assume -lg2c for now
CXXLIBS += -lg2c
endif

NTUPLE_CREATION=1
else #USE_CERNLIB
ifdef CERN_ROOT
# USE_CERNLIB not requested, but we do have CERN_ROOT (i.e. access to cernlib)
#$(warning CERN_ROOT is set $(CERN_ROOT), but USE_CERNLIB not requested.  This is harmless... (just no ntuples...))
endif #CERN_ROOT
endif #USE_CERNLIB

#########################################################

ifdef USE_MERGING # disabled for the time being (to be fixed...)
NO_USE_EXT_WRITER=1
endif

ifndef NO_USE_EXT_WRITER
CXXFLAGS     += -DUSE_EXT_WRITER=$(USE_EXT_WRITER) \
	-DUSING_EXT_WRITER=$(USE_EXT_WRITER) \
	-DEXT_WRITER_PREFIX="\"$(UCESB_BASE_DIR)/hbook/\""
NTUPLE_CREATION=1

OBJS         += external_writer.o

ifeq (,$(CPP_DEFINES_APPLE))
CXXLIBS      += $(LIB_LRT) # for shm_open/unlink
endif

include $(UCESB_BASE_DIR)/makefile_ext_file_writer.inc

$(UNPACKER): $(EXT_WRITERS)
endif

#########################################################

ifdef NTUPLE_CREATION
CXXFLAGS     += -I$(UCESB_BASE_DIR)/hbook

OBJS         += hbook.o staging_ntuple.o writing_ntuple.o staged_ntuple.o
OBJS         += paw_ntuple.o
endif

#########################################################

FILE_CURSES_CONFIG=$(shell which ncurses5-config 2> /dev/null)

ifneq (,$(FILE_CURSES_CONFIG))
CURSES_CFLAGS = $(shell $(FILE_CURSES_CONFIG) --cflags)
CURSES_LIBS = $(shell $(FILE_CURSES_CONFIG) --libs)
else
# Try with some defaults:
CURSES_CFLAGS =
CURSES_LIBS = -lcurses
endif

# And then to verify (also in case ncurses5-config was there, because
# sometimes installations are broken (no symbol-names / .a-files)

HAVE_CURSES := $(shell gcc -o /dev/null $(CURSES_CFLAGS) \
	$(UCESB_BASE_DIR)/lu_common/curses_test.c $(CURSES_LIBS) \
	2> /dev/null && echo -DHAVE_CURSES)

# If, then we are good
ifneq (,$(HAVE_CURSES))
USE_CURSES = 1
CXXFLAGS     += -DUSE_CURSES=$(USE_CURSES) -I$(UCESB_BASE_DIR)/watcher \
	$(CURSES_CFLAGS)
CXXLIBS      += $(CURSES_LIBS)
endif

ifdef USE_CURSES
OBJS         += colourtext.o

ifndef USE_MERGING # disabled for the time being (to be fixed...)
OBJS         += watcher_window.o watcher_channel.o
OBJS         += watcher.o
endif
endif # USE_CURSES

#########################################################

include makefile_additional.inc

#########################################################

ifneq (,$(USER_STRUCT_FILE))
CXXFLAGS += -D'USER_STRUCT_FILE="$(USER_STRUCT_FILE)"'

GENERATED = gen/user_struct_fcncall.hh
endif

ifneq (,$(CALIB_STRUCT_FILE))
CXXFLAGS += -D'CALIB_STRUCT_FILE="$(CALIB_STRUCT_FILE)"'

GENERATED = gen/calib_struct_fcncall.hh
endif

CXXFLAGS += $(addprefix -I,$(INCLUDE_DIRS))

#########################################################

generated: $(GENERATED)

#########################################################

ifdef USE_MERGING
ifdef USE_CERNLIB
$(error Cannot write ntuples when compiled for merging (limitation to be removed))
endif # USE_CERNLIB
CXXFLAGS     += -DUSE_MERGING=$(USE_MERGING)
endif # USE_MERGING

#########################################################

ifdef USE_THREADING
ifndef USE_PTHREAD
$(warning USE_THREADING defined, forcing required USE_PTHREAD=1)
USE_PTHREAD=1
endif # USE_PTHREAD
CXXFLAGS     += -DUSE_THREADING=$(USE_THREADING)
CXXLIBS      +=

OBJS         += reclaim.o \
		worker_thread.o \
		open_retire.o event_reader.o event_processor.o data_queues.o
ifdef USE_CURSES
CXXFLAGS     += -DUSE_PROGRESS=1
OBJS         += thread_info_window.o
endif # USE_CURSES
endif # USE_THREADING

#########################################################

HAVE_PTHREAD := $(shell gcc -pthread -lpthread -o /dev/null \
	$(UCESB_BASE_DIR)/file_input/pthreadtest.c \
	2> /dev/null && echo -DHAVE_PTHREAD)
ifndef USE_PTHREAD
ifneq (,$(HAVE_PTHREAD))
USE_PTHREAD = 1
FORCE_PTHREAD = 1
endif
endif

ifneq (,$(HAVE_PTHREAD))
HAVE_THREAD_LOCAL_STORAGE := $(shell gcc -pthread -lpthread -o /dev/null \
	$(UCESB_BASE_DIR)/file_input/thread_local_storage_test.c \
	2> /dev/null && echo -DHAVE_THREAD_LOCAL_STORAGE)
CXXFLAGS     += $(HAVE_THREAD_LOCAL_STORAGE)
endif

ifdef USE_PTHREAD
CXXFLAGS     += -pthread -DUSE_PTHREAD=$(USE_PTHREAD) -DHAVE_PTHREAD
CXXLIBS      += -lpthread

OBJS         +=

# TODO: Warnings have been made common.  For some while, we wont
# make them fatal by default.  But that will come!

ifeq (,$(FORCE_PTHREAD)) # not if we forced
CXXFLAGS += -Werror # -Wshadow -Wcast-qual
endif

endif # USE_PTHREAD

#########################################################

# Can we find the rawapi sources?  (GSI rfio)

include $(UCESB_BASE_DIR)/makefile_hasrawapi.inc

ifneq (,$(HAS_RAWAPI))
USE_RAWAPI=1
USE_RFIO=1
endif

ifdef USE_RFIO
CXXFLAGS     += -DUSE_RFIO=$(USE_RFIO)
include $(UCESB_BASE_DIR)/makefile_rfiocmd.inc
ifdef USE_RAWAPI
CXXFLAGS     += -DUSE_RAWAPI=$(USE_RAWAPI)
else
# Nowadays only rfcat compiles with rfio stuff, so these included
# or libraries are not needed in the main executable!

## rfio requested, but no GSI rfio available, assume we are otherplace
## (default :) ) and want to use the castor libshift rfio
## implementation
#USE_LIBSHIFT=1
#CXXFLAGS     += -DUSE_LIBSHIFT=$(USE_LIBSHIFT) -I/usr/include/shift
#CXXLIBS      += -lshift
## for now, also assume the stupid libshift is -m32 and we're on
## amd64...
#CXXFLAGS     += -m32
endif
endif

#########################################################

ifdef USE_MBS_INPUT
$(error USE_MBS_INPUT not supported any longer, use USE_LMD_INPUT instead)
endif

#########################################################

ifdef USE_LMD_INPUT
CXXFLAGS     += -DUSE_LMD_INPUT=$(USE_LMD_INPUT)
OBJS         += lmd_event.o lmd_input.o lmd_input_tcp.o \
		tcp_pipe_buffer.o select_event.o \
		lmd_output.o
ifdef USE_PTHREAD
CXXFLAGS     += -DUSE_LMD_OUTPUT_TCP
OBJS         += lmd_output_tcp.o
endif
EMPTY_FILE_FORMAT = --lmd
endif

#########################################################

ifdef USE_PAX_INPUT
CXXFLAGS     += -DUSE_PAX_INPUT=$(USE_PAX_INPUT)
OBJS         += pax_input.o
EMPTY_FILE_FORMAT = --pax
endif

#########################################################

ifdef USE_GENF_INPUT
CXXFLAGS     += -DUSE_GENF_INPUT=$(USE_GENF_INPUT)
OBJS         += genf_input.o
endif

#########################################################

ifdef USE_EBYE_INPUT_16
CXXFLAGS     += -DUSE_EBYE_INPUT_16=$(USE_EBYE_INPUT_16) \
		-DUSE_EBYE_INPUT=$(USE_EBYE_INPUT_16)
OBJS         += ebye_input.o
EMPTY_FILE_FORMAT = --ebye
endif

ifdef USE_EBYE_INPUT_32
CXXFLAGS     += -DUSE_EBYE_INPUT_32=$(USE_EBYE_INPUT_32) \
		-DUSE_EBYE_INPUT=$(USE_EBYE_INPUT_32)
OBJS         += ebye_input.o
EMPTY_FILE_FORMAT = --ebye
endif

#########################################################

ifdef USE_HLD_INPUT
CXXFLAGS     += -DUSE_HLD_INPUT=$(USE_HLD_INPUT)
OBJS         += hld_input.o
EMPTY_FILE_FORMAT = --hld
endif

#########################################################

ifdef USE_RIDF_INPUT
CXXFLAGS     += -DUSE_RIDF_INPUT=$(USE_RIDF_INPUT)
OBJS         += ridf_input.o
endif

#########################################################

include $(UCESB_BASE_DIR)/makefile_acc_def.inc
include $(UCESB_BASE_DIR)/makefile_ucesbgen.inc
include $(UCESB_BASE_DIR)/makefile_psdc.inc
include $(UCESB_BASE_DIR)/makefile_empty_file.inc

EXTRACT=perl $(UCESB_BASE_DIR)/extract.pl
#EXTRACT=$(UCESB_BASE_DIR)/extract.sh

#########################################################

include $(UCESB_BASE_DIR)/makefile_filter_warnings.inc

#########################################################

ifneq (clean,$(MAKECMDGOALS))
-include $(UNPACKER).spec.d
endif

#########################################################

$(foreach dir,$(SRC_DIRS),$(eval $(call CHECK_DIRECTORY_EXIST,$(dir))))
$(foreach dir,$(INCLUDE_DIRS),$(eval $(call CHECK_DIRECTORY_EXIST,$(dir))))

#########################################################

$(UNPACKER).spec.d:
	@echo "  DEPS   $@"
	$(QUIET)$(CPP) -x c++ $(UCESB_CPP_FLAGS) -I$(UCESB_BASE_DIR) -MM -MG $(UNPACKER).spec | \
	  sed -e 's,$(UNPACKER).spec.o[ :]*,gen/$(UNPACKER).uce $(UNPACKER).spec.d : ,g' | \
	  sed -e 's,$(UNPACKER).o[ :]*,gen/$(UNPACKER).uce $(UNPACKER).spec.d : ,g' \
	> $(UNPACKER).spec.d

gen/$(UNPACKER).uce: $(UNPACKER).spec.d $(UCESBGEN)
	@echo "UCESBGEN $@"
	@mkdir -p gen
	$(QUIET)$(CPP) -x c++ $(UCESB_CPP_FLAGS) -I$(UCESB_BASE_DIR) $(UNPACKER).spec | $(UCESBGEN) > $@.tmp
	@mv $@.tmp $@

gen/$(UNPACKER).pre: $(UNPACKER).spec.d
	@echo "   CPP   $@"
	@mkdir -p gen
	$(QUIET)$(CPP) -x c++ $(UCESB_CPP_FLAGS) -I$(UCESB_BASE_DIR) $(UNPACKER).spec > $@.tmp
	@mv $@.tmp $@

gen/verify.uce: gen/reparse.uce $(UCESBGEN)
	@echo "UCESBGEN $@"
	@mkdir -p gen
	$(QUIET)$(CPP) -x c++ gen/reparse.uce | $(UCESBGEN) > $@.tmp
	@mv $@.tmp $@

#########################################################

VERIFYUCESB=gen/verify_reparse.ucesbgen.match

gen/clean_structures.hh: gen/structures.hh
	@echo "   CPP   $@"
	$(QUIET)$(CPP) -x c++ -D__LITTLE_ENDIAN=1234 -D__BIG_ENDIAN=4321 -D__BYTE_ORDER=1234 -P $< | \
	  egrep -v "public:" | grep -v "^$$" > $@
#	  egrep -v "public:|__unpack|__match" | grep -v "^$$" > $@

gen/clean_raw_structure.hh: gen/raw_structure.hh
	@echo "   CPP   $@"
	$(QUIET)$(CPP) -x c++ -P $< | \
	  egrep -v "public:" | grep -v "^$$" > $@

gen/clean_cal_structure.hh: gen/cal_structure.hh
	@echo "   CPP   $@"
	$(QUIET)$(CPP) -x c++ -P $< | \
	  egrep -v "public:" | grep -v "^$$" > $@

gen/structures.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) STRUCTURES < $< > $@

gen/unpacker.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) UNPACKER < $< > $@

gen/packer.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) PACKER < $< > $@

gen/matcher.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) MATCHER < $< > $@

gen/subevent_names.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) SUBEVENT_NAMES < $< > $@

gen/raw_structure.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) EVENT_RAW_STRUCTURE < $< > $@

gen/cal_structure.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) EVENT_CAL_STRUCTURE < $< > $@

gen/data_mapping.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) EVENT_DATA_MAPPING < $< > $@

gen/locations.hh: gen/$(UNPACKER).uce $(VERIFYUCESB)
	@echo " EXTRACT $@"
	@$(EXTRACT) LOCATIONS < $< > $@

gen/reparse.uce: gen/$(UNPACKER).uce
	@echo " EXTRACT $@"
	@$(EXTRACT) INPUT_DEFINITION < $< > $@

gen/verify_reparse.uce: gen/verify.uce
	@echo " EXTRACT $@"
	@$(EXTRACT) INPUT_DEFINITION < $< > $@
#	@echo ERROR >> $@ # force an 'internal' error

#########################################################

gen/default_fcncall_define.hh \
gen/default_fcncall_undef.hh \
gen/default_mirror_define.hh \
gen/default_mirror_undef.hh: $(UCESB_BASE_DIR)/eventloop/default_fcncall_mirror.pl
	@echo "   GEN   $@"
	@mkdir -p $(dir $@)
	@perl $< $@ > $@

#########################################################

#VERIFYPSDC=gen/verify_reparse.psdc.match
#VERIFYPSDCRAW=gen/verify_reparse_raw.psdc.match

gen/struct_dump.psd: gen/structures.hh $(PSDC)
	@echo "  PSDC   $@"
	$(QUIET)$(CPP) -x c++ -D__PSDC__ -D__LITTLE_ENDIAN=1234 -D__BIG_ENDIAN=4321 -D__BYTE_ORDER=1234 \
	  -D'SINGLE(name,ident)=name ident' -D'MULTI(name,ident)=__MULTI__ name ident' $< | \
	  $(PSDC) --ignore-missing-corr-struct > $@.tmp
	@mv $@.tmp $@

gen/struct_fcncall.hh: gen/struct_dump.psd gen/default_fcncall_define.hh gen/default_fcncall_undef.hh # $(VERIFYPSDC)
	@echo " EXTRACT $@"
	@$(EXTRACT) FUNCTION_CALL_PER_MEMBER < $< > $@

gen/struct_mirror.hh: gen/struct_dump.psd gen/default_mirror_define.hh gen/default_mirror_undef.hh # $(VERIFYPSDC)
	@echo " EXTRACT $@"
	@$(EXTRACT) MIRROR_STRUCT < $< > $@

gen/struct_mirror_decl.hh: gen/struct_dump.psd # $(VERIFYPSDC)
	@echo " EXTRACT $@"
	@$(EXTRACT) MIRROR_DECL_STRUCT < $< > $@

##
#
#gen/struct_dump_multi.psd: gen/structures.hh $(PSDC)
#	@echo "  PSDC   $@"
#	@$(CPP) -D__PSDC__ -D__LITTLE_ENDIAN=1234 -D__BIG_ENDIAN=4321 -D__BYTE_ORDER=1234 \
#	  -D'SINGLE(name,ident)=name ident' -D'MULTI(name,ident)=name multi_##ident' $< | \
#	  $(PSDC) > $@.tmp
#	@mv $@.tmp $@
#
#gen/struct_fcncall_multi.hh: gen/struct_dump_multi.psd # $(VERIFYPSDC)
#	@echo " EXTRACT $@"
#	@$(EXTRACT) FUNCTION_CALL_PER_MEMBER < $< > $@
#
#gen/struct_mirror_multi.hh: gen/struct_dump_multi.psd # $(VERIFYPSDC)
#	@echo " EXTRACT $@"
#	@$(EXTRACT) MIRROR_STRUCT < $< > $@
#
##

gen/raw_struct_dump.psd: gen/raw_structure.hh $(PSDC)
	@echo "  PSDC   $@"
	$(QUIET)$(CPP) -x c++ -D__PSDC__ -D__LITTLE_ENDIAN=1234 -D__BIG_ENDIAN=4321 -D__BYTE_ORDER=1234 $< | \
	  $(PSDC) --ignore-missing-corr-struct > $@.tmp
	@mv $@.tmp $@

gen/raw_struct_fcncall.hh: gen/raw_struct_dump.psd gen/default_fcncall_define.hh gen/default_fcncall_undef.hh # $(VERIFYPSDCRAW)
	@echo " EXTRACT $@"
	@$(EXTRACT) FUNCTION_CALL_PER_MEMBER < $< > $@

gen/raw_struct_mirror.hh: gen/raw_struct_dump.psd gen/default_mirror_define.hh gen/default_mirror_undef.hh # $(VERIFYPSDC)
	@echo " EXTRACT $@"
	@$(EXTRACT) MIRROR_STRUCT < $< > $@

#

gen/cal_struct_dump.psd: gen/cal_structure.hh $(PSDC)
	@echo "  PSDC   $@"
	$(QUIET)$(CPP) -x c++ -D__PSDC__ -D__LITTLE_ENDIAN=1234 -D__BIG_ENDIAN=4321 -D__BYTE_ORDER=1234 $< | \
	  $(PSDC) --ignore-missing-corr-struct > $@.tmp
	@mv $@.tmp $@

gen/cal_struct_fcncall.hh: gen/cal_struct_dump.psd gen/default_fcncall_define.hh gen/default_fcncall_undef.hh # $(VERIFYPSDCCAL)
	@echo " EXTRACT $@"
	@$(EXTRACT) FUNCTION_CALL_PER_MEMBER < $< > $@

gen/cal_struct_mirror.hh: gen/cal_struct_dump.psd gen/default_mirror_define.hh gen/default_mirror_undef.hh # $(VERIFYPSDC)
	@echo " EXTRACT $@"
	@$(EXTRACT) MIRROR_STRUCT < $< > $@

#

# The dependency on user_struct.o is to a) make sure the file is
# compilable (the compiler) has better error messages than psdc, and
# b) make sure we depend on all included files
gen/user_struct_dump.psd: $(USER_STRUCT_FILE) user_struct.o $(PSDC)
	@echo "  PSDC   $@"
	$(QUIET)$(CPP) -x c++ $(PSDC_CPP_FLAGS) -D__PSDC__ $(addprefix -I,$(INCLUDE_DIRS)) -D'USER_STRUCT_FCNS_DECL=' $< | \
	  $(PSDC) --ignore-missing-corr-struct > $@.tmp
	@mv $@.tmp $@

gen/user_struct_fcncall.hh: gen/user_struct_dump.psd gen/default_fcncall_define.hh gen/default_fcncall_undef.hh # $(VERIFYPSDCCAL)
	@echo " EXTRACT $@"
	@$(EXTRACT) FUNCTION_CALL_PER_MEMBER < $< > $@

gen/user_struct_mirror.hh: gen/user_struct_dump.psd gen/default_mirror_define.hh gen/default_mirror_undef.hh # $(VERIFYPSDC)
	@echo " EXTRACT $@"
	@$(EXTRACT) MIRROR_STRUCT < $< > $@

# The dependency on user_struct.o ... see above
gen/calib_struct_dump.psd: $(CALIB_STRUCT_FILE) user_struct.o $(PSDC)
	@echo "  PSDC   $@"
	$(QUIET)$(CPP) -x c++ $(PSDC_CPP_FLAGS) -D__PSDC__ $(addprefix -I,$(INCLUDE_DIRS)) -D'CALIB_STRUCT_FCNS_DECL=' $< | \
	  $(PSDC) --ignore-missing-corr-struct > $@.tmp
	@mv $@.tmp $@

gen/calib_struct_fcncall.hh: gen/calib_struct_dump.psd gen/default_fcncall_define.hh gen/default_fcncall_undef.hh # $(VERIFYPSDCCAL)
	@echo " EXTRACT $@"
	@$(EXTRACT) FUNCTION_CALL_PER_MEMBER < $< > $@

gen/calib_struct_mirror.hh: gen/calib_struct_dump.psd gen/default_mirror_define.hh gen/default_mirror_undef.hh # $(VERIFYPSDC)
	@echo " EXTRACT $@"
	@$(EXTRACT) MIRROR_STRUCT < $< > $@

#########################################################

$(VERIFYUCESB): gen/reparse.uce gen/verify_reparse.uce
	@echo " COMPARE $^"
	@diff -u $^ > gen/verify_reparse.diff || echo "Internal error in UCESBGEN, reparse of output mismatch"
	@diff -u $^
	@touch $@

$(VERIFYPSDC): gen/reparse.psd gen/verify_reparse.psd
	@echo " COMPARE $^"
	@diff -u $^ > gen/verify_reparse.diff || echo "Internal error in PSDC, reparse of output mismatch"
	@diff -u $^
	@touch $@

$(VERIFYPSDC): gen/reparse_raw.psd gen/verify_reparse_raw.psd
	@echo " COMPARE $^"
	@diff -u $^ > gen/verify_reparse.diff || echo "Internal error in PSDC, reparse of output mismatch"
	@diff -u $^
	@touch $@

#########################################################

unpacker.o: gen/unpacker.hh gen/matcher.hh gen/packer.hh \
	gen/locations.hh gen/structures.hh gen/data_mapping.hh

#########################################################

include $(UCESB_BASE_DIR)/lu_common/bison_patching.mk

include $(UCESB_BASE_DIR)/lu_common/flex_patching.mk

INCLUDE_FILE_PL = $(UCESB_BASE_DIR)/lu_common/include_file.pl

MORE_DEPS += $(MC_GENDIR)/mc_parser.y.incfile.d

$(MC_GENDIR)/mc_parser.y.incfile.d: $(UCESB_BASE_DIR)/mapcalib/mc_parser.y $(INCLUDE_FILE_PL)
	@echo " INCDEPS $@"
	@mkdir -p $(dir $@)
	@perl $(INCLUDE_FILE_PL) --input=$< --dependencies=$@ > $@

$(MC_GENDIR)/mc_parser.y.incfile: $(UCESB_BASE_DIR)/mapcalib/mc_parser.y $(MC_GENDIR)/mc_parser.y.incfile.d
	@echo " INCFILE $@"
	@mkdir -p $(dir $@)
	@perl $(INCLUDE_FILE_PL) --input=$< && touch $@

$(MC_GENDIR)/y.tab.c: $(UCESB_BASE_DIR)/mapcalib/mc_parser.y $(MC_GENDIR)/mc_parser.y.incfile
	@echo "  YACC   $@"
	@mkdir -p $(dir $@)
	@$(YACC) -d -o $@ $<
	@touch $(MC_GENDIR)/y.tab.h

$(MC_GENDIR)/y.tab.h: $(MC_GENDIR)/y.tab.c

$(MC_GENDIR)/mc_parser.cc: $(MC_GENDIR)/y.tab.c
	@echo "   CP    $@"
	@cat $(MC_GENDIR)/y.tab.c | $(BISON_PATCH_PIPELINE) > $@

$(MC_GENDIR)/mc_parser.hh: $(MC_GENDIR)/y.tab.h
	@echo "   CP    $@"
	@cp $(MC_GENDIR)/y.tab.h $@

MORE_DEPS += $(MC_GENDIR)/mc_lexer.lex.incfile.d

$(MC_GENDIR)/mc_lexer.lex.incfile.d: $(UCESB_BASE_DIR)/mapcalib/mc_lexer.lex $(INCLUDE_FILE_PL)
	@echo " INCDEPS $@"
	@mkdir -p $(dir $@)
	@perl $(INCLUDE_FILE_PL) --input=$< --dependencies=$@ > $@

$(MC_GENDIR)/mc_lexer.lex.incfile: $(UCESB_BASE_DIR)/mapcalib/mc_lexer.lex $(MC_GENDIR)/mc_lexer.lex.incfile.d
	@echo " INCFILE $@"
	@mkdir -p $(dir $@)
	@perl $(INCLUDE_FILE_PL) --input=$< && touch $@

$(MC_GENDIR)/mc_lexer.cc: $(UCESB_BASE_DIR)/mapcalib/mc_lexer.lex $(MC_GENDIR)/mc_lexer.lex.incfile
	@echo "   LEX   $@"
	@mkdir -p $(dir $@)
	@$(LEX) -8 -o $@.lex.tmp $<
	@cat $@.lex.tmp | $(FLEX_PATCH_PIPELINE) > $@.tmp
	@mv $@.tmp $@

$(MC_GENDIR)/mc_lexer.d: $(MC_GENDIR)/mc_parser.hh

CXXFLAGS     += -I$(UCESB_BASE_DIR)/mapcalib

#########################################################

# In such templates, all $ must be replaced by $$, to avoid evaluation
# at instantiation
define COMPILE_FROM_DIR_template
%.o: $(1)/%.cc %.d
	@echo "   CXX   $$@"
	$(QUIET)$$(CXX) -I. -I$$(UCESB_BASE_DIR)/eventloop -I$(1) $(2) \
	  $$(call FILTER_WARNINGS,$$@,$$(CXXFLAGS)) $$(OPTFLAGS) -o $$@ -c $$<

%.d: $(1)/%.cc makefile_additional.inc
	@echo "  DEPS   $$@"
	$(QUIET)$$(CXX) -I. -I$$(UCESB_BASE_DIR)/eventloop -I$(1) $(2) \
	    $$(call FILTER_WARNINGS,$$@,$$(CXXFLAGS)) -MM -MG $$< -DDEPSRUN | \
	  sed -e 's,\($$(*F)\)\.o[ :]*,$$*.o $$@ : ,g' > $$@
endef

$(foreach dir,$(SRC_DIRS),$(eval $(call COMPILE_FROM_DIR_template,$(dir),)))
$(foreach dir,$(SRC_DIRS_LAND02_CODE),$(eval $(call COMPILE_FROM_DIR_template,$(dir), -D__LAND02_CODE__ )))

%.o: %.cc %.d
	@echo "   CXX   $@"
	$(QUIET)$(CXX) -I. -I$(UCESB_BASE_DIR)/eventloop \
	  $(call FILTER_WARNINGS,$@,$(CXXFLAGS)) $(OPTFLAGS) -o $@ -c $<

%.d: %.cc makefile_additional.inc
	@echo "  DEPS   $@"
	$(QUIET)$(CXX) -I. -I$(UCESB_BASE_DIR)/eventloop \
	    $(call FILTER_WARNINGS,$@,$(CXXFLAGS)) -MM -MG $< -DDEPSRUN | \
	  sed -e 's,\($(*F)\)\.o[ :]*,$*.o $@ : ,g' \
	> $@

#########################################################

$(UNPACKER): $(OBJS)

ALL_OBJS = $(OBJS) $(GENOBJS)

AUTO_DEPS = $(ALL_OBJS:%.o=%.d) $(MORE_DEPS)

$(UNPACKER).dep: $(AUTO_DEPS)
	@echo " FULLDEP $@"
	@echo "$@ $(UNPACKER): \\" > $@
	@cat $(AUTO_DEPS) | sed -e 's,^.*:,,g' |\
	  $(SPACE_TO_NEWLINE) |\
	  sed -e 's,^,  ,g' |\
	  sed -e 's,$$,\\,g' |\
	  sed -e 's,\\\\$$,\\,g' | sort -u >> $@

#########################################################
# Test to start the executable with an empty input file (/dev/null)

ifndef USE_MERGING
TEST_ARGS = --show-members --show-calib
endif

gen/$(UNPACKER).runnullstamp: $(UNPACKER)
	@echo "  TEST   $@"
	@./$< /dev/null $(TEST_ARGS) > $@.out 2> $@.err || \
	  ( echo "Failure while running: './$< /dev/null $(TEST_ARGS)':" ; \
	    echo "--- stdout: ---" ; cat $@.out ; \
	    echo "--- stderr: ---"; cat $@.err ; \
	    echo "---------------" ; false)
	@rm $@.out $@.err
	@touch $@

.PHONY: gen/$(UNPACKER).runstamps
gen/$(UNPACKER).runstamps: gen/$(UNPACKER).runnullstamp

#########################################################
# Test to unpack an input file with no payload data

ifneq (,$(EMPTY_FILE_FORMAT))
gen/$(UNPACKER).runemptystamp: $(UNPACKER) $(EMPTY_FILE)
	@echo "  TEST   $@"
	@$(EMPTY_FILE) $(EMPTY_FILE_FORMAT) --events=10 2> $@.err2 | \
	  ./$< --file=- > $@.out 2> $@.err || \
	  ( echo "Failure while running: 'empty_file | ./$<':" ; \
	    echo "--- stdout: ---" ; cat $@.out ; \
	    echo "--- stderr (empty_file): ---"; cat $@.err2 ; \
	    echo "--- stderr: ---"; cat $@.err ; \
	    echo "---------------" ; false)
	@rm $@.out $@.err $@.err2
	@touch $@

gen/$(UNPACKER).runstamps: gen/$(UNPACKER).runemptystamp
endif

#########################################################
# Test to unpack example files

TESTFILES:= $(notdir $(wildcard ../testfiles/$(UNPACKER)__*))

HAS_GUNZIP=$(shell which gunzip 2> /dev/null)
HAS_BUNZIP2=$(shell which bunzip2 2> /dev/null)
HAS_UNXZ=$(shell which unxz 2> /dev/null)

ifeq (,$(HAS_GUNZIP))
TESTFILES:=$(filter-out %.gz,$(TESTFILES))
endif
ifeq (,$(HAS_BUNZIP2))
TESTFILES:=$(filter-out %.bz2,$(TESTFILES))
endif
ifeq (,$(HAS_UNXZ))
TESTFILES:=$(filter-out %.xz,$(TESTFILES))
endif

gen/$(UNPACKER).runfilestamp.%: $(UNPACKER)
	@echo "  TEST   $@"
	@./$< ../testfiles/$* > $@.out 2> $@.err || \
	  ( echo "Failure while running: './$< ../testfiles/$*':" ; \
	    echo "--- stdout: ---" ; cat $@.out ; \
	    echo "--- stderr: ---"; cat $@.err ; \
	    echo "---------------" ; false)
	@rm $@.out $@.err
	@touch $@

gen/$(UNPACKER).runstamps: $(addprefix gen/$(UNPACKER).runfilestamp.,$(TESTFILES))

#########################################################
# Link

$(UNPACKER): $(ALL_OBJS) $(UNPACKER).dep
	@echo "  LINK   $@"
	$(QUIET)$(CXXLINK) $(CXXLINKFLAGS) $(ALL_OBJS) $(CXXLIBS) -o $@

ifneq (clean,$(MAKECMDGOALS))
-include $(AUTO_DEPS) # dependency files (.d)
endif

#########################################################

clean::
	rm -f *.o
	rm -f *.d
	rm -f $(UNPACKER).dep
	rm -f $(UNPACKER)
	rm -f $(UNPACKER).spec.d
	rm -rf $(MC_GENDIR)
	rm -rf gen
	rm -rf gen/acc_auto_def
